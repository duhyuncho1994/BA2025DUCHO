package com.example;

import de.learnlib.oracle.EquivalenceOracle.DFAEquivalenceOracle;
import de.learnlib.query.DefaultQuery;
import de.learnlib.query.Query;
import de.learnlib.oracle.MembershipOracle.DFAMembershipOracle;
import net.automatalib.automaton.fsa.DFA;
import net.automatalib.word.Word;
import java.util.*;

public class ExampleBasedTeacherPrefixNN implements DFAMembershipOracle<Character>, DFAEquivalenceOracle<Character> {

    private final Map<List<Character>, Boolean> examples;
    private final boolean defaultAnswer;
    private final Set<Word<Character>> usedCounterExamples = new HashSet<>();

    public ExampleBasedTeacherPrefixNN(Map<List<Character>, Boolean> examples, boolean defaultAnswer) {
        this.examples = examples;
        this.defaultAnswer = defaultAnswer;
    }

    @Override
    public void processQueries(Collection<? extends Query<Character, Boolean>> queries) {
        for (Query<Character, Boolean> q : queries) {
            List<Character> input = new ArrayList<>();
            for (Character c : q.getInput()) input.add(c);

            if (examples.containsKey(input)) {
                q.answer(examples.get(input));
            } else {
                // Prefix Nearest Neighbor 찾기
                Boolean bestMatch = null;
                int bestPrefixLength = -1;

                for (Map.Entry<List<Character>, Boolean> entry : examples.entrySet()) {
                    int common = commonPrefixLength(input, entry.getKey());
                    if (common > bestPrefixLength) {
                        bestPrefixLength = common;
                        bestMatch = entry.getValue();
                    }
                }
                q.answer(bestMatch != null ? bestMatch : defaultAnswer);
            }
        }
    }

    private int commonPrefixLength(List<Character> a, List<Character> b) {
        int minLen = Math.min(a.size(), b.size());
        int i = 0;
        while (i < minLen && Objects.equals(a.get(i), b.get(i))) {
            i++;
        }
        return i;
    }

    @Override
    public DefaultQuery<Character, Boolean> findCounterExample(DFA<?, Character> hypothesis, Collection<? extends Character> inputs) {
        for (Map.Entry<List<Character>, Boolean> entry : examples.entrySet()) {
            Word<Character> word = Word.fromList(entry.getKey());
            boolean expected = entry.getValue();
            boolean predicted = hypothesis.accepts(word);

            if (expected != predicted && !usedCounterExamples.contains(word)) {
                usedCounterExamples.add(word);
                return new DefaultQuery<>(word, expected);
            }
        }
        return null;
    }
}