package com.example; 

import de.learnlib.algorithm.lstar.dfa.ClassicLStarDFA;
import de.learnlib.algorithm.lstar.dfa.ClassicLStarDFABuilder;
import de.learnlib.algorithm.ttt.dfa.TTTLearnerDFA;
import de.learnlib.oracle.MembershipOracle.DFAMembershipOracle;
import de.learnlib.oracle.equivalence.DFAWMethodEQOracle;
import de.learnlib.oracle.membership.DFASimulatorOracle;
import de.learnlib.query.DefaultQuery;
import de.learnlib.util.Experiment.DFAExperiment;

import net.automatalib.alphabet.impl.Alphabets;
import net.automatalib.alphabet.Alphabet;
import net.automatalib.automaton.fsa.DFA;
import net.automatalib.automaton.fsa.impl.CompactDFA;

import net.automatalib.util.automaton.Automata;
import net.automatalib.word.Word;

import java.util.*;

public class Main{

    public static void main(String[] args) {
        // Target DFA (as SUL)
        CompactDFA<Character> targetDFA = buildTargetDFA();
        Alphabet<Character> alphabet = targetDFA.getInputAlphabet();
        

        // setting sample for save MQ and CE (later used for equivalence test)
        Map<List<Character>, Boolean> sample = new LinkedHashMap<>();

        // Membership Oracle: Logging
        //Membershiporacle for TargetDFA (Teacher Role)
        DFAMembershipOracle<Character> sul = new DFASimulatorOracle<>(targetDFA);
        
        //record all request in samplle, Membershiporalce for logging
        DFAMembershipOracle<Character> loggingOracle = new LoggingDFAMembershipOracle(sul, sample);
        

        // Lstar
        // ClassicLStarDFA<Character> lstar = new ClassicLStarDFABuilder<Character>().withAlphabet(alphabet) // input alphabet
        //                                                                             .withOracle(loggingOracle) // membership oracle
        //                                                                             .create();


        

        TTTLearnerDFA<Character> lstar = Algorithms.createTTT(alphabet, loggingOracle);

        // Equivalence Oracle ( W-Method)
        DFAWMethodEQOracle<Character> eqOracle = new DFAWMethodEQOracle<>(loggingOracle,8);
        
         
        // Lstar Experiment
        DFAExperiment<Character> experiment = new DFAExperiment<>(lstar, eqOracle, alphabet);

        // Counterexamples save in sample
        // List<DefaultQuery<Character, Boolean>> counterexamples = new ArrayList<>();

        
        
        experiment.setProfile(true);
        experiment.run();
        DFA<?, Character> originalDFA = experiment.getFinalHypothesis();

        // DefaultQuery<Character, Boolean> ce = eqOracle.findCounterExample(originalDFA, alphabet);
        // if (ce != null) {
        //     sample.put(ce.getInput().asList(), ce.getOutput());
        // }
       

        DefaultQuery<Character, Boolean> ce;
        while ((ce = eqOracle.findCounterExample(originalDFA, alphabet)) != null) {
            List<Character> ceInput = ce.getInput().asList();
            Boolean ceOutput = ce.getOutput();
            sample.put(ceInput, ceOutput);
        }
            

        
 
       
        

        // learn with ExampleBasedTeacher for 2nd DFA
        ExampleBasedTeacher sampleTeacher = new ExampleBasedTeacher(sample);
        
        // learn DFA_2 
        TTTLearnerDFA<Character> lstar2 = Algorithms.createTTT(alphabet, sampleTeacher);

        // ClassicLStarDFA<Character> lstar2 = new ClassicLStarDFABuilder<Character>().withAlphabet(alphabet) // input alphabet
        //                                                                             .withOracle(sampleTeacher) // membership oracle
        //                                                                             .create();


        DFAExperiment<Character> exp2 = new DFAExperiment<>(lstar2, sampleTeacher, alphabet);
        exp2.run();

        

        DFA<?, Character> resultDFA = exp2.getFinalHypothesis();

        // Compare
        boolean equivalent = Automata.testEquivalence(originalDFA, resultDFA, alphabet);
        System.out.println(sample);
        System.out.println("Are the two DFAs equivalent? " + equivalent);
        System.out.println("original DFA has " + experiment.getFinalHypothesis().size() + " states.");
        
        System.out.println("result DFA has " + exp2.getFinalHypothesis().size() + " states.");
        System.out.println(ce);
        
       
    
        // System.out.println("\n--- Sample Verify ---");
        //  for (Map.Entry<List<Character>, Boolean> entry : sample.entrySet()) {
        //     List<Character> inputList = entry.getKey();
        //     Boolean recordedOutput = entry.getValue();
        //     Word<Character> inputWord = Word.fromList(inputList);
        //     boolean expectedOutput = targetDFA.accepts(inputWord);

        //     System.out.println("Input: " + inputList +
        //                     " | Recorded: " + recordedOutput +
        //                     " | Expected: " + expectedOutput +
        //                     " | Match? " + (recordedOutput == expectedOutput));
        // }

        // // Check for missing input
        // System.out.println("\n[length shorter than  4 input ]");
        // for (int len = 0; len <= 8; len++) {
        //     for (List<Character> input : generateAllInputsOfLength(len, alphabet)) {
        //         if (!sample.containsKey(input)) {
        //             System.out.println("fault input: " + input);
        //         }
        //     }
        // }
    
        
    }

    
    // private static List<List<Character>> generateAllInputsOfLength(int length, Alphabet<Character> alphabet) {
    //     List<List<Character>> result = new ArrayList<>();
    //     if (length == 0) {
    //         result.add(Collections.emptyList());
    //         return result;
    //     }

    //     List<List<Character>> shorter = generateAllInputsOfLength(length - 1, alphabet);
    //     for (List<Character> prefix : shorter) {
    //         for (Character c : alphabet) {
    //             List<Character> extended = new ArrayList<>(prefix);
    //             extended.add(c);
    //             result.add(extended);
    //         }
    //     }
    //     return result;
    // }
    

    // DFA 
    private static CompactDFA<Character> buildTargetDFA() {
        Alphabet<Character> sigma = Alphabets.characters('0', '1');

        return net.automatalib.util.automaton.builder.AutomatonBuilders.newDFA(sigma)
        .withInitial("q0")
                .from("q0")
                    .on('0').to("q1")
                    .on('1').to("q2")
                .from("q1")
                    .on('0').to("q0")
                    .on('1').to("q3")
                .from("q2")
                    .on('0').to("q3")
                    .on('1').to("q1")
                .from("q3")
                    .on('0').to("q2")
                    .on('1').to("q4")
                .from("q4")
                    .on('0').to("q1")
                    .on('1').to("q4")
                .withAccepting("q0")
                .create();
    }
    
}
