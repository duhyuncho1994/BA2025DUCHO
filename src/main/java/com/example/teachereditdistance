package com.example;

import de.learnlib.oracle.EquivalenceOracle.DFAEquivalenceOracle;
import de.learnlib.query.DefaultQuery;
import de.learnlib.query.Query;
import de.learnlib.oracle.MembershipOracle.DFAMembershipOracle;
import net.automatalib.automaton.fsa.DFA;
import net.automatalib.word.Word;
import java.util.*;

public class ExampleBasedTeacherEditDistance implements DFAMembershipOracle<Character>, DFAEquivalenceOracle<Character> {

    private final Map<List<Character>, Boolean> examples;
    private final boolean defaultAnswer;
    private final Set<Word<Character>> usedCounterExamples = new HashSet<>();

    public ExampleBasedTeacherEditDistance(Map<List<Character>, Boolean> examples, boolean defaultAnswer) {
        this.examples = examples;
        this.defaultAnswer = defaultAnswer;
    }

    @Override
    public void processQueries(Collection<? extends Query<Character, Boolean>> queries) {
        for (Query<Character, Boolean> q : queries) {
            List<Character> input = new ArrayList<>();
            for (Character c : q.getInput()) input.add(c);

            if (examples.containsKey(input)) {
                q.answer(examples.get(input));
            } else {
                // Edit Distance Nearest Neighbor 찾기
                Boolean bestMatch = null;
                int minDistance = Integer.MAX_VALUE;

                for (Map.Entry<List<Character>, Boolean> entry : examples.entrySet()) {
                    int dist = editDistance(input, entry.getKey());
                    if (dist < minDistance) {
                        minDistance = dist;
                        bestMatch = entry.getValue();
                    }
                }
                q.answer(bestMatch != null ? bestMatch : defaultAnswer);
            }
        }
    }

    private int editDistance(List<Character> a, List<Character> b) {
        int[][] dp = new int[a.size() + 1][b.size() + 1];

        for (int i = 0; i <= a.size(); i++) dp[i][0] = i;
        for (int j = 0; j <= b.size(); j++) dp[0][j] = j;

        for (int i = 1; i <= a.size(); i++) {
            for (int j = 1; j <= b.size(); j++) {
                if (Objects.equals(a.get(i - 1), b.get(j - 1))) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + Math.min(
                        Math.min(dp[i - 1][j], dp[i][j - 1]),
                        dp[i - 1][j - 1]
                    );
                }
            }
        }
        return dp[a.size()][b.size()];
    }

    @Override
    public DefaultQuery<Character, Boolean> findCounterExample(DFA<?, Character> hypothesis, Collection<? extends Character> inputs) {
        for (Map.Entry<List<Character>, Boolean> entry : examples.entrySet()) {
            Word<Character> word = Word.fromList(entry.getKey());
            boolean expected = entry.getValue();
            boolean predicted = hypothesis.accepts(word);

            if (expected != predicted && !usedCounterExamples.contains(word)) {
                usedCounterExamples.add(word);
                return new DefaultQuery<>(word, expected);
            }
        }
        return null;
    }
}