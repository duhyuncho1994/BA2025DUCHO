package com.example; 

import de.learnlib.algorithm.lstar.dfa.ClassicLStarDFA;
import de.learnlib.algorithm.lstar.dfa.ClassicLStarDFABuilder;
import de.learnlib.algorithm.ttt.dfa.TTTLearnerDFA;
import de.learnlib.oracle.MembershipOracle.DFAMembershipOracle;
import de.learnlib.oracle.equivalence.DFAWMethodEQOracle;
import de.learnlib.oracle.membership.DFASimulatorOracle;
import de.learnlib.query.DefaultQuery;
import de.learnlib.util.Experiment.DFAExperiment;

import net.automatalib.alphabet.impl.Alphabets;
import net.automatalib.alphabet.Alphabet;
import net.automatalib.automaton.fsa.DFA;
import net.automatalib.automaton.fsa.impl.CompactDFA;

import net.automatalib.util.automaton.Automata;


import java.util.*;

public class Main{

    public static void main(String[] args) {
        // Target DFA (as SUL)
        CompactDFA<Character> targetDFA = buildTargetDFA();
        Alphabet<Character> alphabet = targetDFA.getInputAlphabet();
        

        // setting sample for save MQ and CE (later used for equivalence test)
        Map<List<Character>, Boolean> sample = new HashMap<>();

        // Membership Oracle: Logging
        //Membershiporacle for TargetDFA (Teacher Role)
        DFAMembershipOracle<Character> sul = new DFASimulatorOracle<>(targetDFA);
        
        //record all request in samplle, Membershiporalce for logging
        LoggingDFAMembershipOracle loggingOracle = new LoggingDFAMembershipOracle(sul, sample);
        

        // Lstar
        ClassicLStarDFA<Character> lstar = new ClassicLStarDFABuilder<Character>().withAlphabet(alphabet) // input alphabet
                                                                                    .withOracle(loggingOracle) // membership oracle
                                                                                    .create();
        // Equivalence Oracle ( W-Method)
        DFAWMethodEQOracle<Character> eqOracle = new DFAWMethodEQOracle<>(loggingOracle,4);
        
         
        // Lstar Experiment
        DFAExperiment<Character> experiment = new DFAExperiment<>(lstar, eqOracle, alphabet);

        // Counterexamples save in sample
        // List<DefaultQuery<Character, Boolean>> counterexamples = new ArrayList<>();

        
        
        experiment.setProfile(true);
        experiment.run();
        DFA<?, Character> originalDFA = experiment.getFinalHypothesis();

        // DefaultQuery<Character, Boolean> ce = eqOracle.findCounterExample(originalDFA, alphabet);
        // if (ce != null) {
        //     sample.put(ce.getInput().asList(), ce.getOutput());
        // }
       

        DefaultQuery<Character, Boolean> ce;
            while ((ce = eqOracle.findCounterExample(originalDFA, alphabet)) != null) {
                sample.put(ce.getInput().asList(), ce.getOutput());
            }
        

        
 
       
        

        // learn with ExampleBasedTeacher for TTT
        ExampleBasedTeacher sampleTeacher = new ExampleBasedTeacher(sample);
        
        // learn DFA_2 (TTT)
        // TTTLearnerDFA<Character> learner2 = Algorithms.createTTT(alphabet, sampleTeacher);

        ClassicLStarDFA<Character> lstar2 = new ClassicLStarDFABuilder<Character>().withAlphabet(alphabet) // input alphabet
                                                                                    .withOracle(sampleTeacher) // membership oracle
                                                                                    .create();

        DFAExperiment<Character> exp2 = new DFAExperiment<>(lstar2, sampleTeacher, alphabet);
        exp2.run();

        

        DFA<?, Character> resultDFA = exp2.getFinalHypothesis();

        // Compare
        boolean equivalent = Automata.testEquivalence(originalDFA, resultDFA, alphabet);
        System.out.println(sample);
        System.out.println("Are the two DFAs equivalent? " + equivalent);
        System.out.println("original DFA has " + experiment.getFinalHypothesis().size() + " states.");
        
        System.out.println("result DFA has " + exp2.getFinalHypothesis().size() + " states.");
        System.out.println(ce);
        
       
        
        

        
        
    }
    

    // DFA 
    private static CompactDFA<Character> buildTargetDFA() {
        Alphabet<Character> sigma = Alphabets.characters('0', '1');

        return net.automatalib.util.automaton.builder.AutomatonBuilders.newDFA(sigma)
        .withInitial("q0")
                .from("q0")
                    .on('0').to("q1")
                    .on('1').to("q2")
                .from("q1")
                    .on('0').to("q1")
                    .on('1').to("q2")
                .from("q2")
                    .on('0').to("q2")
                    .on('1').to("q0")
                .withAccepting("q1")
                .create();
    }
    
}